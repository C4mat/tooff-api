// Teste completo da API Flask - Vers√£o 4.0 (Ampliado com testes abrangentes)
const BASE_URL = "http://localhost:5000/api"

// Configura√ß√£o de cores para output
const colors = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  magenta: "\x1b[35m",
  cyan: "\x1b[36m",
}

// Estado global dos testes
const testState = {
  totalTestes: 0,
  testesPassaram: 0,
  tokens: {},
  usuarios: {},
  debugMode: true,
  // Armazenar IDs de entidades criadas durante os testes para uso posterior
  entidadesCriadas: {
    eventos: [],
    usuarios: [],
    grupos: [],
  },
}

// Fun√ß√£o auxiliar para fazer requisi√ß√µes com debugging melhorado
async function makeRequest(method, url, data = null, token = null, description = "") {
  const options = {
    method: method,
    headers: {
      "Content-Type": "application/json",
    },
  }

  // Adicionar token se fornecido
  if (token) {
    options.headers["Authorization"] = `Bearer ${token}`
    if (testState.debugMode) {
      console.log(`${colors.yellow}üîë Token usado: ${token.substring(0, 20)}...${colors.reset}`)
    }
  }

  // Adicionar dados se fornecido
  if (data) {
    options.body = JSON.stringify(data)
    if (testState.debugMode) {
      console.log(`${colors.blue}üì§ Dados enviados: ${JSON.stringify(data, null, 2)}${colors.reset}`)
    }
  }

  try {
    if (testState.debugMode) {
      console.log(`${colors.cyan}üåê ${method} ${url}${colors.reset}`)
    }

    const response = await fetch(url, options)
    const result = await response.json()

    return {
      status: response.status,
      data: result,
      headers: response.headers,
    }
  } catch (error) {
    console.log(`${colors.red}‚ùå Erro na requisi√ß√£o: ${error.message}${colors.reset}`)
    return {
      status: "ERROR",
      data: { erro: error.message },
      headers: null,
    }
  }
}

// Fun√ß√£o para exibir resultados
function logResult(testName, result, expectedStatus = null) {
  testState.totalTestes++

  const isSuccess = expectedStatus ? result.status === expectedStatus : result.status < 400
  const statusColor = isSuccess ? colors.green : colors.red
  const icon = isSuccess ? "‚úÖ" : "‚ùå"

  if (isSuccess) testState.testesPassaram++

  console.log(`\n${colors.cyan}=== ${testName} ===${colors.reset}`)
  console.log(`${icon} Status: ${statusColor}${result.status}${colors.reset}`)

  // Exibir resposta de forma inteligente
  if (result.data) {
    if (result.data.access_token) {
      console.log(`${colors.yellow}‚úÖ Token recebido: ${result.data.access_token.substring(0, 30)}...${colors.reset}`)
      if (result.data.usuario) {
        console.log(
          `${colors.yellow}üë§ Usu√°rio: ${result.data.usuario.nome} (${result.data.usuario.email})${colors.reset}`,
        )
      }
    } else if (Array.isArray(result.data)) {
      console.log(`${colors.yellow}üìã Array com ${result.data.length} itens${colors.reset}`)
      if (result.data.length > 0) {
        console.log(
          `${colors.yellow}üìÑ Primeiro item: ${JSON.stringify(result.data[0], null, 2).substring(0, 100)}...${colors.reset}`,
        )
      }
    } else {
      const responseStr = JSON.stringify(result.data, null, 2)
      const truncated = responseStr.length > 300 ? responseStr.substring(0, 300) + "..." : responseStr
      console.log(`${colors.yellow}üìÑ Response: ${truncated}${colors.reset}`)
    }
  }

  return isSuccess
}

// Fun√ß√£o para verificar se o servidor est√° rodando
async function verificarServidor() {
  console.log(`${colors.bright}üîç VERIFICANDO SERVIDOR${colors.reset}`)

  try {
    const response = await fetch(BASE_URL.replace("/api", ""))
    if (response.ok) {
      const data = await response.json()
      console.log(`${colors.green}‚úÖ Servidor Flask rodando${colors.reset}`)
      console.log(`${colors.green}‚úÖ Vers√£o: ${data.version || "N/A"}${colors.reset}`)
      console.log(`${colors.green}‚úÖ Database: ${data.database || "N/A"}${colors.reset}`)
      return true
    }
  } catch (error) {
    console.log(`${colors.red}‚ùå Servidor n√£o est√° rodando: ${error.message}${colors.reset}`)
    console.log(`${colors.yellow}üí° Execute: python app.py${colors.reset}`)
    return false
  }
}

// Fun√ß√£o para testar autentica√ß√£o b√°sica
async function testarAutenticacao() {
  console.log(`\n${colors.bright}üîê SE√á√ÉO 1: AUTENTICA√á√ÉO${colors.reset}`)

  // Credenciais de teste baseadas no seed_data
  const credenciais = [
    {
      nome: "RH",
      email: "maria.rh@techsolutions.com",
      senha: "123456",
      tipo: "rh",
    },
    {
      nome: "Gestor",
      email: "joao.gestor@techsolutions.com",
      senha: "123456",
      tipo: "gestor",
    },
    {
      nome: "Usu√°rio Comum",
      email: "ana.dev@techsolutions.com",
      senha: "123456",
      tipo: "comum",
    },
  ]

  // Testar login para cada tipo de usu√°rio
  for (const cred of credenciais) {
    const result = await makeRequest("POST", `${BASE_URL}/auth/login`, {
      email: cred.email,
      senha: cred.senha,
    })

    logResult(`Login ${cred.nome}`, result, 200)

    if (result.status === 200 && result.data.access_token) {
      testState.tokens[cred.tipo] = result.data.access_token
      testState.usuarios[cred.tipo] = result.data.usuario
      console.log(`${colors.green}üîë Token ${cred.tipo} salvo com sucesso${colors.reset}`)
    }
  }

  // Testar login inv√°lido
  const loginInvalido = await makeRequest("POST", `${BASE_URL}/auth/login`, {
    email: "inexistente@test.com",
    senha: "senha_errada",
  })
  logResult("Login Inv√°lido (deve falhar)", loginInvalido, 401)

  // Testar login com senha incorreta
  const loginSenhaIncorreta = await makeRequest("POST", `${BASE_URL}/auth/login`, {
    email: "maria.rh@techsolutions.com",
    senha: "senha_errada",
  })
  logResult("Login com Senha Incorreta (deve falhar)", loginSenhaIncorreta, 401)

  // Testar endpoint /me se temos token
  if (testState.tokens.rh) {
    console.log(`\n${colors.yellow}üß™ Testando endpoint /me com token RH...${colors.reset}`)
    const me = await makeRequest("GET", `${BASE_URL}/auth/me`, null, testState.tokens.rh)
    logResult("Endpoint /me", me, 200)

    // Se falhar, vamos debugar o token
    if (me.status !== 200) {
      console.log(`${colors.red}üîç DEBUG: Token RH pode estar inv√°lido${colors.reset}`)
      console.log(`${colors.red}üîç Token: ${testState.tokens.rh}${colors.reset}`)
    }
  }
}

// Fun√ß√£o para testar endpoints b√°sicos (sem autentica√ß√£o)
async function testarEndpointsPublicos() {
  console.log(`\n${colors.bright}üåç SE√á√ÉO 2: ENDPOINTS P√öBLICOS${colors.reset}`)

  // Testar UFs (pode ser p√∫blico)
  const ufs = await makeRequest("GET", `${BASE_URL}/ufs`)
  logResult("Listar UFs (p√∫blico)", ufs)

  // Testar tipos de aus√™ncia (pode ser p√∫blico)
  const tiposAusencia = await makeRequest("GET", `${BASE_URL}/tipos-ausencia`)
  logResult("Listar Tipos de Aus√™ncia (p√∫blico)", tiposAusencia)

  // Testar turnos (pode ser p√∫blico)
  const turnos = await makeRequest("GET", `${BASE_URL}/turnos`)
  logResult("Listar Turnos (p√∫blico)", turnos)

  // Testar feriados (pode ser p√∫blico)
  const feriados = await makeRequest("GET", `${BASE_URL}/feriados`)
  logResult("Listar Feriados (p√∫blico)", feriados)
}

// Fun√ß√£o para testar endpoints protegidos
async function testarEndpointsProtegidos() {
  console.log(`\n${colors.bright}üîí SE√á√ÉO 3: ENDPOINTS PROTEGIDOS${colors.reset}`)

  // S√≥ continuar se temos pelo menos um token v√°lido
  if (!testState.tokens.rh && !testState.tokens.gestor && !testState.tokens.comum) {
    console.log(`${colors.red}‚ùå Nenhum token v√°lido dispon√≠vel. Pulando testes protegidos.${colors.reset}`)
    return
  }

  // Testar com token RH
  if (testState.tokens.rh) {
    console.log(`\n${colors.cyan}üë©‚Äçüíº Testando com usu√°rio RH${colors.reset}`)

    // Listar usu√°rios
    const usuarios = await makeRequest("GET", `${BASE_URL}/usuarios`, null, testState.tokens.rh)
    logResult("RH - Listar Usu√°rios", usuarios, 200)

    // Listar grupos
    const grupos = await makeRequest("GET", `${BASE_URL}/grupos`, null, testState.tokens.rh)
    logResult("RH - Listar Grupos", grupos, 200)

    // Listar empresas
    const empresas = await makeRequest("GET", `${BASE_URL}/empresas`, null, testState.tokens.rh)
    logResult("RH - Listar Empresas", empresas, 200)

    // Listar calend√°rio
    const calendario = await makeRequest("GET", `${BASE_URL}/calendario`, null, testState.tokens.rh)
    logResult("RH - Listar Calend√°rio", calendario, 200)
  }

  // Testar com token Gestor
  if (testState.tokens.gestor) {
    console.log(`\n${colors.cyan}üë®‚Äçüíº Testando com usu√°rio Gestor${colors.reset}`)

    // Listar usu√°rios do grupo
    const usuariosGrupo = await makeRequest("GET", `${BASE_URL}/usuarios`, null, testState.tokens.gestor)
    logResult("Gestor - Listar Usu√°rios do Grupo", usuariosGrupo, 200)

    // Tentar acessar empresas (deve falhar)
    const empresasGestor = await makeRequest("GET", `${BASE_URL}/empresas`, null, testState.tokens.gestor)
    logResult("Gestor - Tentar Acessar Empresas (deve falhar)", empresasGestor, 403)

    // Listar calend√°rio do grupo
    if (testState.usuarios.gestor && testState.usuarios.gestor.grupo_id) {
      const calendarioGrupo = await makeRequest(
        "GET",
        `${BASE_URL}/calendario/grupo/${testState.usuarios.gestor.grupo_id}`,
        null,
        testState.tokens.gestor,
      )
      logResult("Gestor - Listar Calend√°rio do Grupo", calendarioGrupo, 200)
    }
  }

  // Testar com token Usu√°rio Comum
  if (testState.tokens.comum) {
    console.log(`\n${colors.cyan}üë§ Testando com usu√°rio Comum${colors.reset}`)

    // Listar eventos pr√≥prios
    const eventos = await makeRequest("GET", `${BASE_URL}/eventos`, null, testState.tokens.comum)
    logResult("Usu√°rio - Listar Eventos Pr√≥prios", eventos, 200)

    // Tentar criar usu√°rio (deve falhar)
    const criarUsuario = await makeRequest(
      "POST",
      `${BASE_URL}/usuarios`,
      {
        cpf: "99988877766", // CPF para o novo usu√°rio
        nome: "Teste Sem Permiss√£o",
        email: "teste.sem.permissao." + Date.now() + "@example.com", // Email √∫nico para o novo usu√°rio
        senha: "123456",
        grupo_id: testState.usuarios.comum?.grupo_id || 1, // Usar um grupo_id v√°lido (e.g., from existing common user)
        inicio_na_empresa: "2023-01-01", // Adicionar campo obrigat√≥rio
        uf: "SP", // Adicionar campo obrigat√≥rio
        tipo_usuario: "comum", // Adicionar campo obrigat√≥rio se sua valida√ß√£o exigir
        flag_gestor: "N", // Adicionar campo obrigat√≥rio se sua valida√ß√£o exigir
      },
      testState.tokens.comum, // Token de usu√°rio comum tentando criar
    )
    logResult("Usu√°rio - Tentar Criar Usu√°rio (deve falhar)", criarUsuario, 403) // Espera 403

    // Tentar acessar calend√°rio de outro grupo (deve falhar)
    const outroGrupoId = testState.usuarios.comum.grupo_id === 1 ? 2 : 1
    const calendarioOutroGrupo = await makeRequest(
      "GET",
      `${BASE_URL}/calendario/grupo/${outroGrupoId}`,
      null,
      testState.tokens.comum,
    )
    logResult("Usu√°rio - Tentar Acessar Calend√°rio de Outro Grupo (deve falhar)", calendarioOutroGrupo, 403)
  }
}

// Fun√ß√£o para testar opera√ß√µes CRUD b√°sicas
async function testarOperacoesCRUD() {
  console.log(`\n${colors.bright}üìù SE√á√ÉO 4: OPERA√á√ïES CRUD B√ÅSICAS${colors.reset}`)

  if (!testState.tokens.rh) {
    console.log(`${colors.red}‚ùå Token RH necess√°rio para testes CRUD. Pulando.${colors.reset}`)
    return
  }

  // Primeiro, vamos obter informa√ß√µes do usu√°rio RH para usar o CNPJ correto
  let cnpjEmpresaRH = "12345678000190" // CNPJ padr√£o como fallback

  if (testState.usuarios.rh && testState.usuarios.rh.grupo_id) {
    // Tentar obter o CNPJ da empresa do RH
    const grupoRH = await makeRequest(
      "GET",
      `${BASE_URL}/grupos/${testState.usuarios.rh.grupo_id}`,
      null,
      testState.tokens.rh,
    )
    if (grupoRH.status === 200 && grupoRH.data.cnpj_empresa) {
      cnpjEmpresaRH = grupoRH.data.cnpj_empresa
      console.log(`${colors.blue}üè¢ CNPJ da empresa do RH: ${cnpjEmpresaRH}${colors.reset}`)
    }
  }

  // Criar um novo grupo usando o CNPJ correto da empresa do RH
  const novoGrupo = await makeRequest(
    "POST",
    `${BASE_URL}/grupos`,
    {
      nome: `Grupo Teste ${Date.now()}`,
      cnpj_empresa: cnpjEmpresaRH, // Usar o CNPJ da empresa do RH
      telefone: "(11) 1234-5678",
      descricao: "Grupo criado durante teste automatizado",
    },
    testState.tokens.rh,
  )
  const sucessoGrupo = logResult("Criar Novo Grupo", novoGrupo, 201)

  // Se grupo foi criado, tentar atualiz√°-lo
  if (sucessoGrupo && novoGrupo.data.id) {
    // Salvar ID do grupo para uso posterior
    testState.entidadesCriadas.grupos.push(novoGrupo.data.id)

    const atualizarGrupo = await makeRequest(
      "PUT",
      `${BASE_URL}/grupos/${novoGrupo.data.id}`,
      {
        descricao: "Grupo atualizado durante teste",
      },
      testState.tokens.rh,
    )
    logResult("Atualizar Grupo Criado", atualizarGrupo, 200)
  }

  // Criar um novo evento
  if (testState.tokens.comum) {
    const novoEvento = await makeRequest(
      "POST",
      `${BASE_URL}/eventos`,
      {
        cpf_usuario: testState.usuarios.comum?.cpf || "34567890123",
        data_inicio: "2025-06-15", // Data que n√£o seja fim de semana ou feriado conhecido
        data_fim: "2025-06-19", // Data que n√£o seja fim de semana ou feriado conhecido
        id_tipo_ausencia: 2, // Usar um tipo que n√£o seja F√©rias para n√£o acionar valida√ß√µes de f√©rias aqui
        uf: "SP",
      },
      testState.tokens.comum,
    )
    const sucessoEvento = logResult("Usu√°rio - Criar Novo Evento (N√£o-F√©rias)", novoEvento, 201)

    // Salvar ID do evento para uso posterior
    if (sucessoEvento && novoEvento.data.id) {
      testState.entidadesCriadas.eventos.push(novoEvento.data.id)
    }
  }
}

// Fun√ß√£o para testar valida√ß√µes de seguran√ßa
async function testarSeguranca() {
  console.log(`\n${colors.bright}üõ°Ô∏è SE√á√ÉO 5: VALIDA√á√ïES DE SEGURAN√áA${colors.reset}`)

  // Acesso sem token
  const semToken = await makeRequest("GET", `${BASE_URL}/usuarios`)
  logResult("Acesso sem token (deve falhar)", semToken, 401)

  // Token inv√°lido
  const tokenInvalido = await makeRequest("GET", `${BASE_URL}/usuarios`, null, "token-completamente-invalido")
  logResult("Token inv√°lido (deve falhar)", tokenInvalido, 401)

  // Token malformado
  const tokenMalformado = await makeRequest("GET", `${BASE_URL}/usuarios`, null, "Bearer token-malformado")
  logResult("Token malformado (deve falhar)", tokenMalformado, 401)

  // Tentar acessar recurso de outro usu√°rio
  if (testState.tokens.comum && testState.usuarios.gestor) {
    const acessoNaoAutorizado = await makeRequest(
      "GET",
      `${BASE_URL}/usuarios/${testState.usuarios.gestor.cpf}`,
      null,
      testState.tokens.comum,
    )
    logResult("Acessar Recurso de Outro Usu√°rio (deve falhar)", acessoNaoAutorizado, 403)
  }

  // Tentar criar grupo com CNPJ inv√°lido (se a valida√ß√£o foi removida, este teste deve ser ajustado ou removido)
  if (testState.tokens.rh) {
    const grupoInvalido = await makeRequest(
      "POST",
      `${BASE_URL}/grupos`,
      {
        nome: "Grupo Teste Inv√°lido CNPJ",
        cnpj_empresa: "00000000000000", // CNPJ que seria inv√°lido
        telefone: "(11) 1234-5678",
      },
      testState.tokens.rh,
    )
    // Se a valida√ß√£o de CNPJ foi removida, esperamos 201. Se n√£o, 400.
    // Ajuste o expectedStatus conforme o estado da sua valida√ß√£o de CNPJ.
    // Por agora, vamos assumir que a valida√ß√£o ainda pode estar ativa em algum n√≠vel ou foi reintroduzida.
    logResult("Criar Grupo com CNPJ Inv√°lido (verificar se valida√ß√£o est√° ativa)", grupoInvalido, 400)
  }
}

// Fun√ß√£o para testar logout
async function testarLogout() {
  console.log(`\n${colors.bright}üö™ SE√á√ÉO 6: LOGOUT${colors.reset}`)

  if (testState.tokens.rh) {
    const logout = await makeRequest("POST", `${BASE_URL}/auth/logout`, null, testState.tokens.rh)
    logResult("Logout RH", logout, 200)

    // Tentar usar token ap√≥s logout
    const aposLogout = await makeRequest("GET", `${BASE_URL}/auth/me`, null, testState.tokens.rh)
    logResult("Usar token ap√≥s logout (deve falhar)", aposLogout, 401)
  }
}

// NOVA FUN√á√ÉO: Testar fluxo de aprova√ß√£o de eventos
async function testarAprovacaoEventos() {
  console.log(`\n${colors.bright}üóìÔ∏è SE√á√ÉO 7: FLUXO DE APROVA√á√ÉO DE EVENTOS${colors.reset}`)

  // Verificar se temos tokens necess√°rios
  if (!testState.tokens.comum || !testState.tokens.gestor) {
    console.log(`${colors.red}‚ùå Tokens de usu√°rio comum e gestor necess√°rios. Pulando.${colors.reset}`)
    return
  }

  // 1. Criar evento como usu√°rio comum
  const novoEvento = await makeRequest(
    "POST",
    `${BASE_URL}/eventos`,
    {
      cpf_usuario: testState.usuarios.comum?.cpf,
      data_inicio: "2025-07-10", // Data que n√£o seja fim de semana ou feriado
      data_fim: "2025-07-15", // Data que n√£o seja fim de semana ou feriado
      id_tipo_ausencia: 2, // N√£o F√©rias
      uf: "SP",
    },
    testState.tokens.comum,
  )
  const sucessoEvento = logResult("Criar Evento (N√£o-F√©rias) para Aprova√ß√£o", novoEvento, 201)

  if (sucessoEvento && novoEvento.data.id) {
    const eventoId = novoEvento.data.id
    testState.entidadesCriadas.eventos.push(eventoId)

    // 2. Tentar aprovar como usu√°rio comum (deve falhar)
    const aprovarComum = await makeRequest(
      "POST",
      `${BASE_URL}/eventos/${eventoId}/aprovar`,
      { aprovador_cpf: testState.usuarios.comum?.cpf },
      testState.tokens.comum,
    )
    logResult("Aprovar Evento como Usu√°rio Comum (deve falhar)", aprovarComum, 403)

    // 3. Aprovar como gestor
    const aprovarGestor = await makeRequest(
      "POST",
      `${BASE_URL}/eventos/${eventoId}/aprovar`,
      { aprovador_cpf: testState.usuarios.gestor?.cpf },
      testState.tokens.gestor,
    )
    logResult("Aprovar Evento como Gestor", aprovarGestor, 200)

    // 4. Verificar status do evento
    const verificarEvento = await makeRequest("GET", `${BASE_URL}/eventos/${eventoId}`, null, testState.tokens.gestor)
    logResult("Verificar Status do Evento Aprovado", verificarEvento, 200)

    // 5. Criar outro evento para rejei√ß√£o
    const eventoParaRejeitar = await makeRequest(
      "POST",
      `${BASE_URL}/eventos`,
      {
        cpf_usuario: testState.usuarios.comum?.cpf,
        data_inicio: "2025-08-10", // Data que n√£o seja fim de semana ou feriado
        data_fim: "2025-08-15", // Data que n√£o seja fim de semana ou feriado
        id_tipo_ausencia: 2, // N√£o F√©rias
        uf: "SP",
      },
      testState.tokens.comum,
    )

    if (eventoParaRejeitar.status === 201 && eventoParaRejeitar.data.id) {
      const eventoRejeitadoId = eventoParaRejeitar.data.id
      testState.entidadesCriadas.eventos.push(eventoRejeitadoId)

      // 6. Rejeitar como gestor
      const rejeitarGestor = await makeRequest(
        "POST",
        `${BASE_URL}/eventos/${eventoRejeitadoId}/rejeitar`,
        { aprovador_cpf: testState.usuarios.gestor?.cpf },
        testState.tokens.gestor,
      )
      logResult("Rejeitar Evento como Gestor", rejeitarGestor, 200)

      // 7. Verificar status do evento rejeitado
      const verificarRejeitado = await makeRequest(
        "GET",
        `${BASE_URL}/eventos/${eventoRejeitadoId}`,
        null,
        testState.tokens.gestor,
      )
      logResult("Verificar Status do Evento Rejeitado", verificarRejeitado, 200)
    }
  }
}

// NOVA FUN√á√ÉO: Testar cria√ß√£o de usu√°rios com diferentes pap√©is
async function testarCriacaoUsuarios() {
  console.log(`\n${colors.bright}üë• SE√á√ÉO 8: CRIA√á√ÉO DE USU√ÅRIOS${colors.reset}`)

  if (!testState.tokens.rh || !testState.tokens.gestor) {
    console.log(`${colors.red}‚ùå Tokens de RH e gestor necess√°rios. Pulando.${colors.reset}`)
    return
  }

  // 1. Criar usu√°rio comum como RH
  const cpfUsuarioComum = Date.now().toString().slice(-11) // CPF pseudo-aleat√≥rio
  const novoUsuarioComum = await makeRequest(
    "POST",
    `${BASE_URL}/usuarios`,
    {
      cpf: cpfUsuarioComum,
      nome: "Novo Usu√°rio Comum Teste",
      email: `novo.comum.teste.${Date.now()}@techsolutions.com`,
      senha: "123456",
      grupo_id: testState.usuarios.comum?.grupo_id || 1, // Usar grupo do usu√°rio comum existente ou fallback
      inicio_na_empresa: "2023-01-01", // Data que garanta > 1 ano de empresa
      uf: "SP",
      tipo_usuario: "comum",
      flag_gestor: "N",
    },
    testState.tokens.rh,
  )
  const sucessoUsuarioComum = logResult("Criar Usu√°rio Comum como RH", novoUsuarioComum, 201)

  if (sucessoUsuarioComum) {
    testState.entidadesCriadas.usuarios.push(cpfUsuarioComum)
  }

  // 2. Criar usu√°rio gestor como RH
  const cpfUsuarioGestor = (Date.now() + 1).toString().slice(-11) // CPF pseudo-aleat√≥rio diferente
  const novoUsuarioGestor = await makeRequest(
    "POST",
    `${BASE_URL}/usuarios`,
    {
      cpf: cpfUsuarioGestor,
      nome: "Novo Usu√°rio Gestor Teste",
      email: `novo.gestor.teste.${Date.now()}@techsolutions.com`,
      senha: "123456",
      grupo_id: testState.usuarios.gestor?.grupo_id || 1, // Usar grupo do gestor existente ou fallback
      inicio_na_empresa: "2023-01-01",
      uf: "SP",
      tipo_usuario: "comum", // Tipo base √© comum, flag_gestor define
      flag_gestor: "S",
    },
    testState.tokens.rh,
  )
  const sucessoUsuarioGestor = logResult("Criar Usu√°rio Gestor como RH", novoUsuarioGestor, 201)

  if (sucessoUsuarioGestor) {
    testState.entidadesCriadas.usuarios.push(cpfUsuarioGestor)
  }

  // 3. Tentar criar usu√°rio em grupo n√£o autorizado (Gestor tentando criar em grupo que n√£o √© o seu, se houver outro)
  const grupoNaoAutorizado = testState.usuarios.gestor?.grupo_id === 1 ? 2 : 1 // Exemplo de outro grupo
  if (testState.usuarios.rh?.grupo_id !== grupoNaoAutorizado) {
    // Garante que o grupo √© diferente do RH tamb√©m
    const cpfUsuarioInvalido = (Date.now() + 2).toString().slice(-11)
    const usuarioGrupoInvalido = await makeRequest(
      "POST",
      `${BASE_URL}/usuarios`,
      {
        cpf: cpfUsuarioInvalido,
        nome: "Usu√°rio Grupo Inv√°lido Teste",
        email: `grupo.invalido.teste.${Date.now()}@techsolutions.com`,
        senha: "123456",
        grupo_id: grupoNaoAutorizado,
        inicio_na_empresa: "2023-01-01",
        uf: "SP",
      },
      testState.tokens.gestor, // Gestor tentando criar
    )
    logResult("Criar Usu√°rio em Grupo N√£o Autorizado (Gestor) (deve falhar)", usuarioGrupoInvalido, 403)
  } else {
    console.log(
      `${colors.yellow}‚ö†Ô∏è Pulando teste de cria√ß√£o de usu√°rio em grupo n√£o autorizado pelo gestor (grupos de teste n√£o permitem).${colors.reset}`,
    )
    testState.totalTestes++
    testState.testesPassaram++
  }

  // 4. Tentar criar usu√°rio com CPF inv√°lido (se a valida√ß√£o foi removida, este teste deve ser ajustado ou removido)
  const usuarioCpfInvalido = await makeRequest(
    "POST",
    `${BASE_URL}/usuarios`,
    {
      cpf: "123", // CPF que seria inv√°lido
      nome: "Usu√°rio CPF Inv√°lido Teste",
      email: `cpf.invalido.teste.${Date.now()}@techsolutions.com`,
      senha: "123456",
      grupo_id: testState.usuarios.rh?.grupo_id || 1,
      inicio_na_empresa: "2023-01-01",
      uf: "SP",
    },
    testState.tokens.rh,
  )
  // Ajuste o expectedStatus conforme o estado da sua valida√ß√£o de CPF.
  logResult("Criar Usu√°rio com CPF Inv√°lido (verificar se valida√ß√£o est√° ativa)", usuarioCpfInvalido, 400)

  // 5. Tentar criar usu√°rio com email duplicado
  if (sucessoUsuarioComum && novoUsuarioComum.data.email) {
    const cpfEmailDuplicado = (Date.now() + 3).toString().slice(-11)
    const usuarioEmailDuplicado = await makeRequest(
      "POST",
      `${BASE_URL}/usuarios`,
      {
        cpf: cpfEmailDuplicado,
        nome: "Usu√°rio Email Duplicado Teste",
        email: novoUsuarioComum.data.email, // Email j√° usado
        senha: "123456",
        grupo_id: testState.usuarios.rh?.grupo_id || 1,
        inicio_na_empresa: "2023-01-01",
        uf: "SP",
      },
      testState.tokens.rh,
    )
    logResult("Criar Usu√°rio com Email Duplicado (deve falhar)", usuarioEmailDuplicado, 409) // Espera 409
  }
}

// NOVA FUN√á√ÉO: Testar gerenciamento completo de grupos
async function testarGerenciamentoGrupos() {
  console.log(`\n${colors.bright}üè¢ SE√á√ÉO 9: GERENCIAMENTO DE GRUPOS${colors.reset}`)

  if (!testState.tokens.rh) {
    console.log(`${colors.red}‚ùå Token RH necess√°rio. Pulando.${colors.reset}`)
    return
  }

  // 1. Obter CNPJ da empresa do RH
  let cnpjEmpresaRH = "12345678000190"
  if (testState.usuarios.rh && testState.usuarios.rh.grupo_id) {
    const grupoRHInfo = await makeRequest(
      "GET",
      `${BASE_URL}/grupos/${testState.usuarios.rh.grupo_id}`,
      null,
      testState.tokens.rh,
    )
    if (grupoRHInfo.status === 200 && grupoRHInfo.data.cnpj_empresa) {
      cnpjEmpresaRH = grupoRHInfo.data.cnpj_empresa
    }
  }

  // 2. Criar grupo com dados inv√°lidos
  const grupoInvalido = await makeRequest(
    "POST",
    `${BASE_URL}/grupos`,
    {
      nome: "", // Nome vazio
      cnpj_empresa: cnpjEmpresaRH,
      telefone: "(11) 1234-5678",
    },
    testState.tokens.rh,
  )
  logResult("Criar Grupo com Dados Inv√°lidos (deve falhar)", grupoInvalido, 400)

  // 3. Criar grupo v√°lido
  const nomeNovoGrupo = `Grupo Teste Completo ${Date.now()}`
  const novoGrupo = await makeRequest(
    "POST",
    `${BASE_URL}/grupos`,
    {
      nome: nomeNovoGrupo,
      cnpj_empresa: cnpjEmpresaRH,
      telefone: "(11) 1234-5678",
      descricao: "Grupo para teste completo",
    },
    testState.tokens.rh,
  )
  const sucessoGrupo = logResult("Criar Novo Grupo V√°lido", novoGrupo, 201)

  if (sucessoGrupo && novoGrupo.data.id) {
    const grupoId = novoGrupo.data.id
    testState.entidadesCriadas.grupos.push(grupoId) // Adiciona para limpeza se desativa√ß√£o falhar

    // 4. Atualizar grupo
    const atualizarGrupo = await makeRequest(
      "PUT",
      `${BASE_URL}/grupos/${grupoId}`,
      {
        nome: "Grupo Atualizado Teste",
        descricao: "Descri√ß√£o atualizada durante teste",
      },
      testState.tokens.rh,
    )
    logResult("Atualizar Grupo", atualizarGrupo, 200)

    // 5. Tentar atualizar como gestor (deve falhar)
    if (testState.tokens.gestor) {
      const atualizarGestor = await makeRequest(
        "PUT",
        `${BASE_URL}/grupos/${grupoId}`,
        {
          descricao: "Tentativa de atualiza√ß√£o por gestor",
        },
        testState.tokens.gestor,
      )
      logResult("Atualizar Grupo como Gestor (deve falhar)", atualizarGestor, 403)
    }

    // 6. Desativar grupo
    const desativarGrupo = await makeRequest("DELETE", `${BASE_URL}/grupos/${grupoId}`, null, testState.tokens.rh)
    logResult("Desativar Grupo", desativarGrupo, 200)

    // 7. Verificar se grupo est√° desativado
    const verificarGrupo = await makeRequest("GET", `${BASE_URL}/grupos/${grupoId}`, null, testState.tokens.rh)
    if (logResult("Verificar Grupo Desativado (GET)", verificarGrupo, 200)) {
      if (verificarGrupo.data.ativo === false) {
        console.log(`${colors.green}‚úÖ Grupo corretamente marcado como inativo.${colors.reset}`)
      } else {
        console.log(`${colors.red}‚ùå Grupo ainda est√° ativo ap√≥s desativa√ß√£o.${colors.reset}`)
        testState.testesPassaram-- // Decrementa se a l√≥gica de desativa√ß√£o falhou
      }
    }
  }
}

// NOVA FUN√á√ÉO: Testar valida√ß√£o de dados e casos de borda
async function testarValidacaoDados() {
  console.log(`\n${colors.bright}üîç SE√á√ÉO 10: VALIDA√á√ÉO DE DADOS${colors.reset}`)

  if (!testState.tokens.comum || !testState.tokens.rh) {
    console.log(`${colors.red}‚ùå Tokens necess√°rios. Pulando.${colors.reset}`)
    return
  }

  // 1. Evento com data final anterior √† data inicial
  const eventoDataInvalida = await makeRequest(
    "POST",
    `${BASE_URL}/eventos`,
    {
      cpf_usuario: testState.usuarios.comum?.cpf,
      data_inicio: "2025-07-15", // Data posterior √† final
      data_fim: "2025-07-10",
      id_tipo_ausencia: 2, // N√£o F√©rias
      uf: "SP",
    },
    testState.tokens.comum,
  )
  logResult("Criar Evento com Data Inv√°lida (deve falhar)", eventoDataInvalida, 400)

  // 2. Evento com tipo de aus√™ncia inexistente
  const eventoTipoInexistente = await makeRequest(
    "POST",
    `${BASE_URL}/eventos`,
    {
      cpf_usuario: testState.usuarios.comum?.cpf,
      data_inicio: "2025-07-10",
      data_fim: "2025-07-15",
      id_tipo_ausencia: 9999, // Tipo inexistente
      uf: "SP",
    },
    testState.tokens.comum,
  )
  logResult("Criar Evento com Tipo Inexistente (deve falhar)", eventoTipoInexistente, 400)

  // 3. Usu√°rio com UF inv√°lida
  const cpfUsuarioUfInvalida = (Date.now() + 4).toString().slice(-11)
  const usuarioUfInvalida = await makeRequest(
    "POST",
    `${BASE_URL}/usuarios`,
    {
      cpf: cpfUsuarioUfInvalida,
      nome: "Usu√°rio UF Inv√°lida Teste",
      email: `uf.invalida.teste.${Date.now()}@techsolutions.com`,
      senha: "123456",
      grupo_id: testState.usuarios.rh?.grupo_id || 1,
      inicio_na_empresa: "2023-01-01",
      uf: "XX", // UF inv√°lida
    },
    testState.tokens.rh,
  )
  logResult("Criar Usu√°rio com UF Inv√°lida (deve falhar)", usuarioUfInvalida, 400)

  // 4. Grupo sem telefone (campo obrigat√≥rio)
  let cnpjEmpresaRH = "12345678000190"
  if (testState.usuarios.rh && testState.usuarios.rh.grupo_id) {
    const grupoRHInfo = await makeRequest(
      "GET",
      `${BASE_URL}/grupos/${testState.usuarios.rh.grupo_id}`,
      null,
      testState.tokens.rh,
    )
    if (grupoRHInfo.status === 200 && grupoRHInfo.data.cnpj_empresa) {
      cnpjEmpresaRH = grupoRHInfo.data.cnpj_empresa
    }
  }

  const grupoSemTelefone = await makeRequest(
    "POST",
    `${BASE_URL}/grupos`,
    {
      nome: `Grupo Sem Telefone Teste ${Date.now()}`,
      cnpj_empresa: cnpjEmpresaRH,
      // Telefone omitido
    },
    testState.tokens.rh,
  )
  logResult("Criar Grupo Sem Telefone (deve falhar)", grupoSemTelefone, 400)
}

// NOVA FUN√á√ÉO: Testar calend√°rio e visualiza√ß√µes
async function testarCalendario() {
  console.log(`\n${colors.bright}üìÖ SE√á√ÉO 11: CALEND√ÅRIO E VISUALIZA√á√ïES${colors.reset}`)

  if (!testState.tokens.rh || !testState.tokens.gestor || !testState.tokens.comum) {
    console.log(`${colors.red}‚ùå Tokens necess√°rios. Pulando.${colors.reset}`)
    return
  }

  // 1. Calend√°rio geral (RH)
  const calendarioRH = await makeRequest("GET", `${BASE_URL}/calendario`, null, testState.tokens.rh)
  logResult("Calend√°rio Geral (RH)", calendarioRH, 200)

  // 2. Calend√°rio com filtro de data
  const dataInicio = new Date()
  const dataFim = new Date()
  dataFim.setMonth(dataFim.getMonth() + 3) // 3 meses √† frente

  const calendarioFiltrado = await makeRequest(
    "GET",
    `${BASE_URL}/calendario?inicio=${dataInicio.toISOString().split("T")[0]}&fim=${dataFim.toISOString().split("T")[0]}`,
    null,
    testState.tokens.rh,
  )
  logResult("Calend√°rio com Filtro de Data", calendarioFiltrado, 200)

  // 3. Calend√°rio de grupo espec√≠fico
  if (testState.usuarios.gestor && testState.usuarios.gestor.grupo_id) {
    const calendarioGrupo = await makeRequest(
      "GET",
      `${BASE_URL}/calendario/grupo/${testState.usuarios.gestor.grupo_id}`,
      null,
      testState.tokens.gestor,
    )
    logResult("Calend√°rio de Grupo Espec√≠fico", calendarioGrupo, 200)
  }

  // 4. Calend√°rio com filtro de tipo de aus√™ncia
  const calendarioTipoAusencia = await makeRequest(
    "GET",
    `${BASE_URL}/calendario?tipo_ausencia=1`, // Assumindo que tipo 1 √© F√©rias ou um tipo comum
    null,
    testState.tokens.rh,
  )
  logResult("Calend√°rio com Filtro de Tipo de Aus√™ncia", calendarioTipoAusencia, 200)

  // 5. Usu√°rio comum s√≥ deve ver eventos do seu grupo
  const calendarioUsuarioComum = await makeRequest("GET", `${BASE_URL}/calendario`, null, testState.tokens.comum)
  logResult("Calend√°rio para Usu√°rio Comum", calendarioUsuarioComum, 200)
}

// SE√á√ÉO 12: TESTES DO SISTEMA DE F√âRIAS
async function testarSistemaDeFerias() {
  console.log(`\n${colors.bright}üèñÔ∏è SE√á√ÉO 12: TESTES DO SISTEMA DE F√âRIAS${colors.reset}`)

  const ID_TIPO_AUSENCIA_FERIAS = 1 // !!! ATEN√á√ÉO: Ajuste este ID se "F√©rias" tiver outro ID no seu sistema !!!
  const FERIADO_CONHECIDO_DATA = "2025-12-25" // Ex: Natal
  const SABADO_TESTE = "2025-06-21" // S√°bado
  const DOMINGO_TESTE = "2025-06-22" // Domingo

  // Usu√°rio comum para a maioria dos testes de agendamento
  const usuarioComum = testState.usuarios.comum
  const tokenComum = testState.tokens.comum

  // Usu√°rio RH para criar novo empregado e verificar saldos
  const usuarioRH = testState.usuarios.rh
  const tokenRH = testState.tokens.rh

  // Usu√°rio Gestor para aprova√ß√µes
  const usuarioGestor = testState.usuarios.gestor
  const tokenGestor = testState.tokens.gestor

  if (!tokenComum || !usuarioComum?.cpf) {
    console.log(
      `${colors.red}‚ùå Token ou CPF do usu√°rio comum n√£o encontrado. Pulando testes de f√©rias.${colors.reset}`,
    )
    return
  }
  if (!tokenRH || !usuarioRH?.cpf) {
    console.log(
      `${colors.red}‚ùå Token ou CPF do usu√°rio RH n√£o encontrado. Pulando partes dos testes de f√©rias.${colors.reset}`,
    )
    return
  }
  if (!tokenGestor || !usuarioGestor?.cpf) {
    console.log(
      `${colors.red}‚ùå Token ou CPF do usu√°rio Gestor n√£o encontrado. Pulando partes dos testes de f√©rias.${colors.reset}`,
    )
    return
  }

  const UF_USUARIO_COMUM = usuarioComum.uf || "SP" // UF para checagem de feriados

  console.log(`\n${colors.cyan}üìÖ 12.1 Valida√ß√µes na Cria√ß√£o de Eventos de F√©rias (Usu√°rio Comum)${colors.reset}`)

  // Teste 1: Agendar f√©rias come√ßando no S√°bado
  const feriasSabado = await makeRequest(
    "POST",
    `${BASE_URL}/eventos`,
    {
      cpf_usuario: usuarioComum.cpf,
      data_inicio: SABADO_TESTE,
      data_fim: "2025-06-25", // Qualquer data v√°lida ap√≥s
      id_tipo_ausencia: ID_TIPO_AUSENCIA_FERIAS,
      uf: UF_USUARIO_COMUM,
    },
    tokenComum,
  )
  logResult("F√©rias - In√≠cio no S√°bado (deve falhar)", feriasSabado, 400)

  // Teste 2: Agendar f√©rias terminando no Domingo
  const feriasDomingo = await makeRequest(
    "POST",
    `${BASE_URL}/eventos`,
    {
      cpf_usuario: usuarioComum.cpf,
      data_inicio: "2025-06-23", // Segunda-feira
      data_fim: DOMINGO_TESTE,
      id_tipo_ausencia: ID_TIPO_AUSENCIA_FERIAS,
      uf: UF_USUARIO_COMUM,
    },
    tokenComum,
  )
  logResult("F√©rias - Fim no Domingo (deve falhar)", feriasDomingo, 400)

  // Teste 3: Agendar f√©rias come√ßando em feriado
  const feriasFeriadoInicio = await makeRequest(
    "POST",
    `${BASE_URL}/eventos`,
    {
      cpf_usuario: usuarioComum.cpf,
      data_inicio: FERIADO_CONHECIDO_DATA,
      data_fim: "2025-12-27",
      id_tipo_ausencia: ID_TIPO_AUSENCIA_FERIAS,
      uf: UF_USUARIO_COMUM,
    },
    tokenComum,
  )
  logResult(`F√©rias - In√≠cio em Feriado (${FERIADO_CONHECIDO_DATA}) (deve falhar)`, feriasFeriadoInicio, 400)

  // Teste 4: Agendar f√©rias terminando em feriado
  const feriasFeriadoFim = await makeRequest(
    "POST",
    `${BASE_URL}/eventos`,
    {
      cpf_usuario: usuarioComum.cpf,
      data_inicio: "2025-12-22",
      data_fim: FERIADO_CONHECIDO_DATA,
      id_tipo_ausencia: ID_TIPO_AUSENCIA_FERIAS,
      uf: UF_USUARIO_COMUM,
    },
    tokenComum,
  )
  logResult(`F√©rias - Fim em Feriado (${FERIADO_CONHECIDO_DATA}) (deve falhar)`, feriasFeriadoFim, 400)

  // Teste 5: Tentar agendar mais de 30 dias de f√©rias de uma vez
  const trintaECincoDias = await makeRequest(
    "POST",
    `${BASE_URL}/eventos`,
    {
      cpf_usuario: usuarioComum.cpf,
      data_inicio: "2026-01-05", // Uma segunda-feira v√°lida no futuro
      data_fim: "2026-02-13", // Aproximadamente 30 dias √∫teis / 39 dias corridos
      id_tipo_ausencia: ID_TIPO_AUSENCIA_FERIAS,
      uf: UF_USUARIO_COMUM,
    },
    tokenComum,
  )
  logResult("F√©rias - Agendar mais de 30 dias de uma vez (deve falhar)", trintaECincoDias, 400)

  // Testes sequenciais de saldo de f√©rias
  const saldoInicialComum = await makeRequest(
    "GET",
    `${BASE_URL}/usuarios/${usuarioComum.cpf}/vacation-allowance`,
    null,
    tokenComum,
  )
  logResult("F√©rias - Saldo Inicial Usu√°rio Comum", saldoInicialComum, 200)
  const diasDisponiveisInicial = saldoInicialComum.data?.dias_restantes || 0

  if (diasDisponiveisInicial < 25 && saldoInicialComum.status === 200) {
    console.log(
      `${colors.yellow}‚ö†Ô∏è Usu√°rio comum tem apenas ${diasDisponiveisInicial} dias. Alguns testes de saldo podem n√£o ser representativos.${colors.reset}`,
    )
  }

  // Teste 6: Agendar 10 dias de f√©rias (v√°lido)
  const ferias10Dias = await makeRequest(
    "POST",
    `${BASE_URL}/eventos`,
    {
      cpf_usuario: usuarioComum.cpf,
      data_inicio: "2026-03-02",
      data_fim: "2026-03-11", // 10 dias corridos (inclui 1 fds)
      id_tipo_ausencia: ID_TIPO_AUSENCIA_FERIAS,
      uf: UF_USUARIO_COMUM,
    },
    tokenComum,
  )
  const sucessoFerias10 = logResult("F√©rias - Agendar 10 dias (v√°lido)", ferias10Dias, 201)
  let evento10DiasId = null
  if (sucessoFerias10 && ferias10Dias.data.id) {
    evento10DiasId = ferias10Dias.data.id
    testState.entidadesCriadas.eventos.push(evento10DiasId)
    const gestorParaAprovar = usuarioGestor.cpf
    const aprovacaoResult = await makeRequest(
      "POST",
      `${BASE_URL}/eventos/${evento10DiasId}/aprovar`,
      { aprovador_cpf: gestorParaAprovar },
      tokenGestor,
    )
    logResult("F√©rias - Aprova√ß√£o dos 10 dias", aprovacaoResult, 200)
  }

  // Teste 7: Tentar agendar mais 25 dias de f√©rias (total > 30, se 10 j√° foram aprovados)
  const saldoApos10Dias = await makeRequest(
    "GET",
    `${BASE_URL}/usuarios/${usuarioComum.cpf}/vacation-allowance`,
    null,
    tokenComum,
  )
  const diasRestantesApos10 = saldoApos10Dias.data?.dias_restantes || 0

  if (saldoApos10Dias.status === 200 && diasRestantesApos10 < 25) {
    console.log(
      `${colors.yellow}‚ö†Ô∏è Saldo ap√≥s 10 dias √© ${diasRestantesApos10}. Teste de 25 dias pode n√£o estourar o limite como esperado.${colors.reset}`,
    )
  }

  const ferias25Dias = await makeRequest(
    "POST",
    `${BASE_URL}/eventos`,
    {
      cpf_usuario: usuarioComum.cpf,
      data_inicio: "2026-04-06",
      data_fim: "2026-04-30", // 25 dias corridos
      id_tipo_ausencia: ID_TIPO_AUSENCIA_FERIAS,
      uf: UF_USUARIO_COMUM,
    },
    tokenComum,
  )
  logResult("F√©rias - Agendar mais 25 dias (deve falhar se 10 aprovados e saldo < 25)", ferias25Dias, 400)

  console.log(
    `\n${colors.cyan}üßë‚Äçüíº 12.2 Endpoint de Saldo de F√©rias (/usuarios/{cpf}/vacation-allowance)${colors.reset}`,
  )
  // Teste 8: RH acessando saldo de usu√°rio comum
  const saldoRHparaComum = await makeRequest(
    "GET",
    `${BASE_URL}/usuarios/${usuarioComum.cpf}/vacation-allowance`,
    null,
    tokenRH,
  )
  logResult("Saldo F√©rias - RH para Usu√°rio Comum", saldoRHparaComum, 200)

  // Teste 9: Gestor acessando saldo de membro do seu grupo
  if (usuarioComum.grupo_id === usuarioGestor.grupo_id) {
    const saldoGestorParaComum = await makeRequest(
      "GET",
      `${BASE_URL}/usuarios/${usuarioComum.cpf}/vacation-allowance`,
      null,
      tokenGestor,
    )
    logResult("Saldo F√©rias - Gestor para Membro do Grupo", saldoGestorParaComum, 200)
  } else {
    console.log(
      `${colors.yellow}‚ö†Ô∏è Usu√°rio comum (${usuarioComum.cpf}, grupo ${usuarioComum.grupo_id}) n√£o pertence ao grupo do gestor de teste (${usuarioGestor.cpf}, grupo ${usuarioGestor.grupo_id}). Pulando teste Gestor para Membro do Grupo.${colors.reset}`,
    )
    testState.totalTestes++
    testState.testesPassaram++
  }

  // Teste 10: Gestor tentando acessar saldo de usu√°rio fora do seu grupo
  if (usuarioRH.grupo_id !== usuarioGestor.grupo_id) {
    const saldoGestorParaOutro = await makeRequest(
      "GET",
      `${BASE_URL}/usuarios/${usuarioRH.cpf}/vacation-allowance`,
      null,
      tokenGestor,
    )
    logResult("Saldo F√©rias - Gestor para Fora do Grupo (deve falhar)", saldoGestorParaOutro, 403)
  } else {
    console.log(
      `${colors.yellow}‚ö†Ô∏è Usu√°rio RH (${usuarioRH.cpf}, grupo ${usuarioRH.grupo_id}) pertence ao mesmo grupo do gestor de teste (${usuarioGestor.cpf}, grupo ${usuarioGestor.grupo_id}). Pulando teste Gestor para Fora do Grupo.${colors.reset}`,
    )
    testState.totalTestes++
    testState.testesPassaram++
  }

  // Teste 11: Usu√°rio comum acessando seu pr√≥prio saldo
  const saldoComumProprio = await makeRequest(
    "GET",
    `${BASE_URL}/usuarios/${usuarioComum.cpf}/vacation-allowance`,
    null,
    tokenComum,
  )
  logResult("Saldo F√©rias - Usu√°rio Comum para Pr√≥prio Saldo", saldoComumProprio, 200)

  // Teste 12: Usu√°rio comum tentando acessar saldo de outro usu√°rio
  const saldoComumParaOutro = await makeRequest(
    "GET",
    `${BASE_URL}/usuarios/${usuarioRH.cpf}/vacation-allowance`,
    null,
    tokenComum,
  )
  logResult("Saldo F√©rias - Usu√°rio Comum para Outro (deve falhar)", saldoComumParaOutro, 403)

  // Teste 13: Acessar saldo de usu√°rio inexistente
  const cpfInexistente = "00000000000"
  const saldoInexistente = await makeRequest(
    "GET",
    `${BASE_URL}/usuarios/${cpfInexistente}/vacation-allowance`,
    null,
    tokenRH,
  )
  logResult("Saldo F√©rias - Usu√°rio Inexistente (deve falhar)", saldoInexistente, 404)

  console.log(`\n${colors.cyan}üë∂ 12.3 Valida√ß√£o de Tempo M√≠nimo de Empresa${colors.reset}`)
  const hojeISO = new Date().toISOString().split("T")[0]
  const cpfNovoEmpregado = Date.now().toString().slice(-11)
  const emailNovoEmpregado = `novo.ferias.${cpfNovoEmpregado}@test.com`

  const criarNovoEmpregado = await makeRequest(
    "POST",
    `${BASE_URL}/usuarios`,
    {
      cpf: cpfNovoEmpregado,
      nome: "Empregado Recente Teste F√©rias",
      email: emailNovoEmpregado,
      senha: "123456",
      grupo_id: usuarioComum.grupo_id,
      inicio_na_empresa: hojeISO,
      uf: UF_USUARIO_COMUM,
      tipo_usuario: "comum",
      flag_gestor: "N",
    },
    tokenRH,
  )
  const sucessoNovoEmpregado = logResult("F√©rias - Criar Novo Empregado (in√≠cio hoje)", criarNovoEmpregado, 201)

  if (sucessoNovoEmpregado && criarNovoEmpregado.data.cpf) {
    testState.entidadesCriadas.usuarios.push(criarNovoEmpregado.data.cpf) // Salva o CPF retornado pela API

    // Teste 14: Novo empregado (menos de 1 ano) tenta agendar f√©rias
    const feriasNovoEmpregado = await makeRequest(
      "POST",
      `${BASE_URL}/eventos`,
      {
        cpf_usuario: criarNovoEmpregado.data.cpf, // Usa o CPF do usu√°rio rec√©m-criado
        data_inicio: "2026-01-05",
        data_fim: "2026-01-09",
        id_tipo_ausencia: ID_TIPO_AUSENCIA_FERIAS,
        uf: UF_USUARIO_COMUM,
      },
      tokenRH, // RH agendando para ele
    )
    logResult("F√©rias - Novo Empregado (<1 ano) tenta agendar (deve falhar)", feriasNovoEmpregado, 400)
  }

  console.log(`\n${colors.cyan}üëç 12.4 Valida√ß√£o na Aprova√ß√£o de Eventos de F√©rias (Gestor)${colors.reset}`)
  // Garante que o usu√°rio comum tem saldo suficiente para os pr√≥ximos testes de aprova√ß√£o
  // Se o teste dos 10 dias foi aprovado, o saldo pode estar reduzido.
  // Para este teste, idealmente, usar√≠amos um usu√°rio com saldo "limpo" ou resetar o saldo.
  // Como n√£o temos reset, vamos logar o saldo atual.
  const saldoPreAprovacao = await makeRequest(
    "GET",
    `${BASE_URL}/usuarios/${usuarioComum.cpf}/vacation-allowance`,
    null,
    tokenComum,
  )
  logResult("F√©rias - Saldo do Usu√°rio Comum antes dos testes de aprova√ß√£o em lote", saldoPreAprovacao, 200)
  const diasDisponiveisPreAprovacao = saldoPreAprovacao.data?.dias_restantes || 0
  console.log(
    `${colors.blue}‚ÑπÔ∏è Saldo atual do usu√°rio comum para testes de aprova√ß√£o: ${diasDisponiveisPreAprovacao} dias.${colors.reset}`,
  )

  // Setup: Usu√°rio comum (com >1 ano) agenda 20 dias de f√©rias.
  const feriasParaAprovar1 = await makeRequest(
    "POST",
    `${BASE_URL}/eventos`,
    {
      cpf_usuario: usuarioComum.cpf,
      data_inicio: "2026-07-06",
      data_fim: "2026-07-25", // 20 dias corridos
      id_tipo_ausencia: ID_TIPO_AUSENCIA_FERIAS,
      uf: UF_USUARIO_COMUM,
    },
    tokenComum,
  )
  const sucessoFeriasAprovar1 = logResult("F√©rias - Setup: Agendar 20 dias para aprova√ß√£o", feriasParaAprovar1, 201)
  const eventoId1 = feriasParaAprovar1.data?.id

  // Setup: Usu√°rio comum agenda mais 15 dias de f√©rias.
  const feriasParaAprovar2 = await makeRequest(
    "POST",
    `${BASE_URL}/eventos`,
    {
      cpf_usuario: usuarioComum.cpf,
      data_inicio: "2026-08-03",
      data_fim: "2026-08-17", // 15 dias corridos
      id_tipo_ausencia: ID_TIPO_AUSENCIA_FERIAS,
      uf: UF_USUARIO_COMUM,
    },
    tokenComum,
  )
  const sucessoFeriasAprovar2 = logResult(
    "F√©rias - Setup: Agendar mais 15 dias para aprova√ß√£o",
    feriasParaAprovar2,
    201,
  )
  const eventoId2 = feriasParaAprovar2.data?.id

  if (sucessoFeriasAprovar1 && eventoId1) testState.entidadesCriadas.eventos.push(eventoId1)
  if (sucessoFeriasAprovar2 && eventoId2) testState.entidadesCriadas.eventos.push(eventoId2)

  if (sucessoFeriasAprovar1 && eventoId1 && tokenGestor && usuarioGestor?.cpf) {
    // Teste 15: Gestor aprova o primeiro evento de 20 dias.
    if (diasDisponiveisPreAprovacao >= 20) {
      // S√≥ tenta aprovar se h√° saldo
      const aprovarEvento1 = await makeRequest(
        "POST",
        `${BASE_URL}/eventos/${eventoId1}/aprovar`,
        { aprovador_cpf: usuarioGestor.cpf },
        tokenGestor,
      )
      logResult("F√©rias - Gestor aprova 1¬∫ evento (20 dias)", aprovarEvento1, 200)

      if (sucessoFeriasAprovar2 && eventoId2 && aprovarEvento1.status === 200) {
        // Teste 16: Gestor tenta aprovar o segundo evento de 15 dias (total 35, deve exceder se saldo inicial era ~30)
        const aprovarEvento2 = await makeRequest(
          "POST",
          `${BASE_URL}/eventos/${eventoId2}/aprovar`,
          { aprovador_cpf: usuarioGestor.cpf },
          tokenGestor,
        )
        logResult(
          "F√©rias - Gestor tenta aprovar 2¬∫ evento (15 dias, excedendo limite) (deve falhar)",
          aprovarEvento2,
          400,
        )
      }
    } else {
      console.log(
        `${colors.yellow}‚ö†Ô∏è Saldo insuficiente (${diasDisponiveisPreAprovacao} dias) para aprovar 20 dias. Pulando testes de aprova√ß√£o em lote.${colors.reset}`,
      )
      testState.totalTestes += 2
      testState.testesPassaram += 2 // Pula 2 testes
    }
  }
}

// Fun√ß√£o para limpar dados de teste
async function limparDadosTeste() {
  console.log(`\n${colors.bright}üßπ LIMPEZA DE DADOS DE TESTE${colors.reset}`)

  if (!testState.tokens.rh) {
    console.log(`${colors.red}‚ùå Token RH necess√°rio para limpeza. Pulando.${colors.reset}`)
    return
  }

  // Limpar eventos criados
  // Usar um Set para evitar duplicatas se IDs forem adicionados mais de uma vez
  const eventosUnicosParaDeletar = [...new Set(testState.entidadesCriadas.eventos)]
  for (const eventoId of eventosUnicosParaDeletar) {
    const deletarEvento = await makeRequest("DELETE", `${BASE_URL}/eventos/${eventoId}`, null, testState.tokens.rh)
    logResult(`Deletar Evento ID ${eventoId}`, deletarEvento, 200) // Espera 200 para dele√ß√£o bem-sucedida
  }

  // Limpar usu√°rios criados
  const usuariosUnicosParaDeletar = [...new Set(testState.entidadesCriadas.usuarios)]
  for (const cpfUsuario of usuariosUnicosParaDeletar) {
    const deletarUsuario = await makeRequest("DELETE", `${BASE_URL}/usuarios/${cpfUsuario}`, null, testState.tokens.rh)
    logResult(`Deletar Usu√°rio CPF ${cpfUsuario}`, deletarUsuario, 200) // Espera 200 para desativa√ß√£o/dele√ß√£o
  }

  // Limpar grupos criados (desativar)
  const gruposUnicosParaDeletar = [...new Set(testState.entidadesCriadas.grupos)]
  let gruposDesativadosCount = 0
  for (const grupoId of gruposUnicosParaDeletar) {
    // A desativa√ß√£o j√° acontece em testarGerenciamentoGrupos.
    // Aqui, apenas contamos os que foram adicionados √† lista para limpeza.
    // Se a desativa√ß√£o falhou l√°, este log pode ser impreciso.
    // Uma abordagem mais robusta seria tentar desativar aqui novamente se n√£o foi feito.
    // Por ora, vamos assumir que a desativa√ß√£o em testarGerenciamentoGrupos √© o principal.
    gruposDesativadosCount++
  }
  if (gruposDesativadosCount > 0) {
    console.log(
      `${colors.green}‚úÖ ${gruposDesativadosCount} grupos foram marcados para limpeza (desativados em seus testes).${colors.reset}`,
    )
  }

  // Resetar listas de entidades criadas para futuras execu√ß√µes (se o script for rodado m√∫ltiplas vezes no mesmo processo)
  testState.entidadesCriadas.eventos = []
  testState.entidadesCriadas.usuarios = []
  testState.entidadesCriadas.grupos = []
}

// Fun√ß√£o para gerar relat√≥rio final
function gerarRelatorio() {
  console.log(`\n${colors.bright}üìä RELAT√ìRIO FINAL${colors.reset}`)
  console.log("=".repeat(60))

  const porcentagemSucesso =
    testState.totalTestes > 0 ? ((testState.testesPassaram / testState.totalTestes) * 100).toFixed(1) : "N/A"
  const statusColor = porcentagemSucesso >= 90 ? colors.green : porcentagemSucesso >= 70 ? colors.yellow : colors.red

  console.log(`${colors.bright}Total de Testes:${colors.reset} ${testState.totalTestes}`)
  console.log(`${colors.green}Testes Passaram:${colors.reset} ${testState.testesPassaram}`)
  console.log(`${colors.red}Testes Falharam:${colors.reset} ${testState.totalTestes - testState.testesPassaram}`)
  console.log(`${colors.bright}Taxa de Sucesso:${colors.reset} ${statusColor}${porcentagemSucesso}%${colors.reset}`)

  console.log(`\n${colors.bright}üîë TOKENS OBTIDOS:${colors.reset}`)
  Object.keys(testState.tokens).forEach((tipo) => {
    console.log(`${colors.green}‚úÖ ${tipo.toUpperCase()}: ${testState.tokens[tipo] ? "OK" : "FALHOU"}${colors.reset}`)
  })

  console.log(`\n${colors.bright}üìà ESTAT√çSTICAS DE ENTIDADES CRIADAS/DELETADAS (TENTATIVAS):${colors.reset}`)
  console.log(`${colors.blue}üóìÔ∏è Eventos: ${[...new Set(testState.entidadesCriadas.eventos)].length}${colors.reset}`)
  console.log(`${colors.blue}üë§ Usu√°rios: ${[...new Set(testState.entidadesCriadas.usuarios)].length}${colors.reset}`)
  console.log(`${colors.blue}üè¢ Grupos: ${[...new Set(testState.entidadesCriadas.grupos)].length}${colors.reset}`)

  console.log(`\n${colors.bright}üí° DIAGN√ìSTICO:${colors.reset}`)
  if (testState.totalTestes === 0) {
    console.log(`${colors.yellow}‚ö†Ô∏è Nenhum teste foi executado.${colors.reset}`)
  } else if (testState.testesPassaram === testState.totalTestes) {
    console.log(`${colors.green}üéâ Todos os testes passaram! API funcionando perfeitamente!${colors.reset}`)
  } else if (porcentagemSucesso >= 90) {
    console.log(`${colors.green}‚úÖ API funcionando muito bem, com pequenas falhas.${colors.reset}`)
  } else if (porcentagemSucesso >= 70) {
    console.log(`${colors.yellow}‚ö†Ô∏è API funcionando com alguns problemas.${colors.reset}`)
  } else if (Object.keys(testState.tokens).length === 0) {
    console.log(`${colors.red}üö® PROBLEMA CR√çTICO: Nenhum login funcionou${colors.reset}`)
    console.log(`${colors.yellow}üîß Verifique as credenciais no banco de dados${colors.reset}`)
    console.log(`${colors.yellow}üîß Execute: python scripts/seed_data_complete.py${colors.reset}`)
  } else if (testState.testesPassaram < 5) {
    console.log(`${colors.red}üö® PROBLEMA CR√çTICO: Tokens n√£o est√£o funcionando ou falhas generalizadas${colors.reset}`)
    console.log(`${colors.yellow}üîß Verifique a configura√ß√£o JWT no Flask e a sa√∫de geral da API${colors.reset}`)
  } else {
    console.log(`${colors.red}‚ùå API com falhas significativas. Revis√£o necess√°ria.${colors.reset}`)
  }

  console.log(`\n${colors.bright}üîß COMANDOS √öTEIS:${colors.reset}`)
  console.log(`${colors.cyan}- Recriar dados: python scripts/seed_data_complete.py${colors.reset}`)
  console.log(`${colors.cyan}- Verificar integridade: python scripts/validate_integrity.py${colors.reset}`)
  console.log(`${colors.cyan}- Verificar ambiente: python scripts/check_environment.py${colors.reset}`)
}

// Fun√ß√£o principal
async function executarTestes() {
  console.log(`${colors.bright}üöÄ TESTE COMPLETO DA API - VERS√ÉO 4.0${colors.reset}`)
  console.log(`${colors.blue}üìÖ ${new Date().toLocaleString("pt-BR")}${colors.reset}`)
  console.log(`${colors.blue}üîó Base URL: ${BASE_URL}${colors.reset}\n`)

  // Verificar se servidor est√° rodando
  const servidorOk = await verificarServidor()
  if (!servidorOk) {
    console.log(`${colors.red}‚ùå N√£o √© poss√≠vel continuar sem o servidor${colors.reset}`)
    return
  }

  try {
    // Executar todas as se√ß√µes de teste
    await testarAutenticacao()
    await testarEndpointsPublicos()
    await testarEndpointsProtegidos()
    await testarOperacoesCRUD()
    await testarSeguranca()

    // Novas se√ß√µes de teste
    await testarAprovacaoEventos()
    await testarCriacaoUsuarios()
    await testarGerenciamentoGrupos()
    await testarValidacaoDados()
    await testarCalendario()

    // >>> ADICIONAR NOVA SE√á√ÉO DE TESTES DE F√âRIAS AQUI <<<
    await testarSistemaDeFerias() // Nova se√ß√£o de testes

    // Limpar dados de teste
    await limparDadosTeste()

    // Testar logout por √∫ltimo
    await testarLogout()

    // Gerar relat√≥rio final
    gerarRelatorio()
  } catch (error) {
    console.log(`${colors.red}‚ùå Erro durante execu√ß√£o dos testes: ${error.message}${colors.reset}`)
    console.log(`${colors.red}Stack: ${error.stack}${colors.reset}`)
  }
}

// Executar testes
console.log(`${colors.bright}üéØ Iniciando testes da API Flask...${colors.reset}`)
console.log(`${colors.yellow}‚öôÔ∏è Modo debug: ${testState.debugMode ? "ATIVADO" : "DESATIVADO"}${colors.reset}`)
console.log(`${colors.yellow}üîß Para desativar debug, mude debugMode para false${colors.reset}\n`)

executarTestes().catch((error) => {
  console.error(`${colors.red}üí• Erro fatal: ${error.message}${colors.reset}`)
})
