"""
Script para validar integridade de CPF/CNPJ no banco de dados
"""
import sys
from pathlib import Path
import argparse
from dotenv import load_dotenv
from api.database.models import init_db
from api.validation.integrity_checker import CPFCNPJIntegrityChecker
from api.validation.report_generator import ReportGenerator

# Carrega vari√°veis de ambiente
load_dotenv()

# Adiciona o diret√≥rio pai ao path para importar os m√≥dulos
sys.path.append(str(Path(__file__).parent.parent))


def main():
    """Fun√ß√£o principal do script de valida√ß√£o"""
    parser = argparse.ArgumentParser(description='Validador de integridade CPF/CNPJ')
    parser.add_argument('--database', '-d', 
                       help='URL do banco de dados (padr√£o: SQLite local)',
                       default="sqlite:///database/tooff_app.db")
    parser.add_argument('--output', '-o', 
                       help='Arquivo de sa√≠da para relat√≥rio JSON')
    parser.add_argument('--quiet', '-q', 
                       action='store_true',
                       help='Modo silencioso (apenas erros)')
    
    args = parser.parse_args()
    
    print("üöÄ Iniciando valida√ß√£o de integridade CPF/CNPJ...")
    print(f"üìä Banco de dados: {args.database}")
    
    # Inicializa o banco de dados
    try:
        init_db(args.database)
    except Exception as e:
        print(f"‚ùå Erro ao conectar com o banco: {e}")
        return 1
    
    # Executa as verifica√ß√µes
    checker = CPFCNPJIntegrityChecker()
    report = checker.run_all_checks()
    
    # Gera relat√≥rio no console
    if not args.quiet:
        console_report = ReportGenerator.generate_console_report(report)
        print("\n" + console_report)
    
    # Salva relat√≥rio em arquivo se solicitado
    if args.output:
        filename = ReportGenerator.save_report_to_file(report, args.output)
        print(f"\nüíæ Relat√≥rio salvo em: {filename}")
    
    # Retorna c√≥digo de sa√≠da baseado nos resultados
    if report.errors:
        print(f"\n‚ùå Valida√ß√£o conclu√≠da com {len(report.errors)} erro(s)")
        return 1
    elif report.warnings:
        print(f"\n‚ö†Ô∏è  Valida√ß√£o conclu√≠da com {len(report.warnings)} aviso(s)")
        return 0
    else:
        print("\n‚úÖ Valida√ß√£o conclu√≠da com sucesso - nenhum problema encontrado!")
        return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
