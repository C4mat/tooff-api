#!/usr/bin/env python3
"""
Script para verificar os dados no banco de dados
Exibe um resumo de todos os dados existentes
"""

import os
import sys
import logging
from dotenv import load_dotenv
from tabulate import tabulate

# Adiciona o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from api.database.models import init_db, get_session
from api.database.models import (
    Usuario, Empresa, Grupo, UF, TipoAusencia, 
    Turno, FeriadoNacional, FeriadoEstadual, Evento
)

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

def count_records(model):
    """Conta registros de um modelo"""
    with get_session() as session:
        return session.query(model).count()

def get_sample_records(model, limit=5):
    """Obt√©m uma amostra de registros"""
    with get_session() as session:
        return session.query(model).limit(limit).all()

def print_table(title, headers, rows):
    """Imprime uma tabela formatada"""
    print(f"\n{title}")
    print(tabulate(rows, headers=headers, tablefmt="grid"))

def verify_ufs():
    """Verifica UFs cadastradas"""
    count = count_records(UF)
    samples = get_sample_records(UF, 5)
    
    rows = [[uf.cod_uf, uf.uf] for uf in samples]
    print_table(f"UFs Cadastradas (Total: {count})", ["C√≥digo", "UF"], rows)
    
    return count

def verify_empresas():
    """Verifica empresas cadastradas"""
    count = count_records(Empresa)
    samples = get_sample_records(Empresa, 5)
    
    rows = [[empresa.cnpj, empresa.nome, empresa.telefone] for empresa in samples]
    print_table(f"Empresas Cadastradas (Total: {count})", ["CNPJ", "Nome", "Telefone"], rows)
    
    return count

def verify_grupos():
    """Verifica grupos cadastrados"""
    count = count_records(Grupo)
    samples = get_sample_records(Grupo, 5)
    
    rows = [[grupo.id, grupo.nome, grupo.cnpj_empresa] for grupo in samples]
    print_table(f"Grupos Cadastrados (Total: {count})", ["ID", "Nome", "CNPJ Empresa"], rows)
    
    return count

def verify_usuarios():
    """Verifica usu√°rios cadastrados"""
    count = count_records(Usuario)
    samples = get_sample_records(Usuario, 5)
    
    rows = [[
        usuario.cpf, 
        usuario.nome, 
        usuario.email, 
        usuario.tipo_usuario,
        usuario.UF,
        usuario.flag_gestor
    ] for usuario in samples]
    
    print_table(
        f"Usu√°rios Cadastrados (Total: {count})", 
        ["CPF", "Nome", "Email", "Tipo", "UF", "Gestor"], 
        rows
    )
    
    return count

def verify_tipos_ausencia():
    """Verifica tipos de aus√™ncia cadastrados"""
    count = count_records(TipoAusencia)
    samples = get_sample_records(TipoAusencia)
    
    rows = [[tipo.id_tipo_ausencia, tipo.descricao_ausencia, "Sim" if tipo.usa_turno else "N√£o"] 
            for tipo in samples]
    
    print_table(
        f"Tipos de Aus√™ncia Cadastrados (Total: {count})", 
        ["ID", "Descri√ß√£o", "Usa Turno"], 
        rows
    )
    
    return count

def verify_turnos():
    """Verifica turnos cadastrados"""
    count = count_records(Turno)
    samples = get_sample_records(Turno)
    
    rows = [[turno.id, turno.descricao_ausencia] for turno in samples]
    print_table(f"Turnos Cadastrados (Total: {count})", ["ID", "Descri√ß√£o"], rows)
    
    return count

def verify_feriados():
    """Verifica feriados cadastrados"""
    count_nacionais = count_records(FeriadoNacional)
    count_estaduais = count_records(FeriadoEstadual)
    
    samples_nacionais = get_sample_records(FeriadoNacional, 3)
    samples_estaduais = get_sample_records(FeriadoEstadual, 3)
    
    rows_nacionais = [[
        feriado.data_feriado.strftime('%Y-%m-%d'), 
        feriado.descricao_feriado,
        feriado.uf
    ] for feriado in samples_nacionais]
    
    rows_estaduais = [[
        feriado.data_feriado.strftime('%Y-%m-%d'), 
        feriado.descricao_feriado,
        feriado.uf
    ] for feriado in samples_estaduais]
    
    print_table(
        f"Feriados Nacionais Cadastrados (Total: {count_nacionais})", 
        ["Data", "Descri√ß√£o", "UF"], 
        rows_nacionais
    )
    
    print_table(
        f"Feriados Estaduais Cadastrados (Total: {count_estaduais})", 
        ["Data", "Descri√ß√£o", "UF"], 
        rows_estaduais
    )
    
    return count_nacionais + count_estaduais

def verify_eventos():
    """Verifica eventos cadastrados"""
    count = count_records(Evento)
    samples = get_sample_records(Evento, 5)
    
    rows = [[
        evento.id,
        evento.cpf_usuario,
        evento.data_inicio.strftime('%Y-%m-%d'),
        evento.data_fim.strftime('%Y-%m-%d'),
        evento.status
    ] for evento in samples]
    
    print_table(
        f"Eventos Cadastrados (Total: {count})", 
        ["ID", "CPF", "Data In√≠cio", "Data Fim", "Status"], 
        rows
    )
    
    return count

def connect_to_database():
    """Conecta ao banco de dados usando as mesmas configura√ß√µes do seed"""
    # Configura√ß√£o do banco MySQL
    db_host = os.getenv('DB_HOST')
    db_port = os.getenv('DB_PORT', '3306')
    db_name = os.getenv('DB_NAME')
    db_user = os.getenv('DB_USER')
    db_pass = os.getenv('DB_PASS')
    
    database_url = None
    if all([db_host, db_name, db_user, db_pass]):
        database_url = f"mysql+pymysql://{db_user}:{db_pass}@{db_host}:{db_port}/{db_name}"
        logging.info("üöÄ Conectando ao MySQL...")
        logging.info(f"üìä Host: {db_host}")
        logging.info(f"üóÑÔ∏è Database: {db_name}")
    else:
        logging.info("‚ö†Ô∏è Vari√°veis MySQL n√£o configuradas, usando SQLite local")
    
    init_db(database_url)
    logging.info("‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!")

def main():
    """Fun√ß√£o principal"""
    print("\n" + "="*60)
    print("üìä VERIFICA√á√ÉO DE DADOS NO BANCO")
    print("="*60)
    
    # Carrega vari√°veis de ambiente
    env_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')
    if os.path.exists(env_path):
        load_dotenv(env_path)
        logging.info(f"‚úÖ Arquivo .env carregado: {env_path}")
    else:
        logging.warning("‚ö†Ô∏è Arquivo .env n√£o encontrado")
    
    # Conecta ao banco usando a mesma l√≥gica do seed
    try:
        connect_to_database()
    except Exception as e:
        logging.error(f"‚ùå Erro ao conectar com o banco: {e}")
        return
    
    # Verifica dados
    try:
        print("\n" + "="*60)
        print("üìä RESUMO DOS DADOS NO BANCO")
        print("="*60)
        
        ufs = verify_ufs()
        empresas = verify_empresas()
        grupos = verify_grupos()
        usuarios = verify_usuarios()
        tipos_ausencia = verify_tipos_ausencia()
        turnos = verify_turnos()
        feriados = verify_feriados()
        eventos = verify_eventos()
        
        print("\n" + "="*60)
        print("üìä TOTAIS:")
        print(f"üó∫Ô∏è  UFs: {ufs}")
        print(f"üè¢ Empresas: {empresas}")
        print(f"üë• Grupos: {grupos}")
        print(f"üë§ Usu√°rios: {usuarios}")
        print(f"üìã Tipos de Aus√™ncia: {tipos_ausencia}")
        print(f"‚è∞ Turnos: {turnos}")
        print(f"üéâ Feriados: {feriados}")
        print(f"üìÖ Eventos: {eventos}")
        print("="*60)
        
    except Exception as e:
        logging.error(f"‚ùå Erro durante a verifica√ß√£o: {e}")
        return
    
    print("\n" + "="*60)
    print("‚úÖ VERIFICA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("="*60)

if __name__ == "__main__":
    main()
